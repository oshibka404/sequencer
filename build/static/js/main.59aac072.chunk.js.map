{"version":3,"sources":["helpers/notes.ts","components/Sequencer/Step/Step.tsx","context.ts","components/Sequencer/Track/Track.tsx","components/Sequencer/Sequencer.tsx","components/App.tsx","serviceWorker.ts","index.tsx"],"names":["scale","n","Step","props","className","isCurrent","onMouseDown","e","button","toggleStep","setIsEditing","toggleGhost","setIsGhostEditing","onContextMenu","preventDefault","onMouseEnter","isEditing","onDoubleClick","toggleAccent","value","style","opacity","ctx","AudioContext","master","createGain","filter","createBiquadFilter","reverb","createConvolver","reverbGain","comp","createDynamicsCompressor","frequency","connect","destination","threshold","knee","gain","fetch","then","res","a","arrayBuffer","buffer","decodeAudioData","catch","TrackView","useState","osc","setOscillator","gainNode","setGainNode","initialTrack","track","setTrack","setStep","index","steps","splice","Object","assign","useEffect","currentStep","cancelScheduledValues","currentTime","setValueAtTime","exponentialRampToValueAtTime","pitch","start","createOscillator","name","map","key","isGhostEditing","totalSteps","Sequencer","playIntervalID","useRef","isPlaying","tempo","setCurrentStep","window","clearInterval","current","resume","sixteenthTime","setInterval","Array","fill","_","i","sequence","getEmptySequence","note","notes","App","setSequence","setIsPlaying","setTempo","onMouseUp","title","onClick","type","onChange","parseInt","target","Math","random","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.59aac072.chunk.js","sourcesContent":["const n = {\n    'C2': 65.41,\n    'C#2': 69.30,\n    'D2': 73.42,\n    'D#2': 77.78,\n    'E2': 82.41,\n    'F2': 87.31,\n    'F#2': 92.50,\n    'G2': 98.00,\n    'G#2': 103.83,\n    'A2': 110.00,\n    'A#2': 116.54,\n    'B2': 123.47,\n    'C3': 130.81,\n    'C#3': 138.59,\n    'D3': 146.83,\n    'D#3': 155.56,\n    'E3': 164.81,\n    'F3': 174.61,\n    'F#3': 185.00,\n    'G3': 196.00,\n    'G#3': 207.65,\n    'A3': 220.00,\n    'A#3': 233.08,\n    'B3': 246.94,\n    'C4': 261.63,\n    'C#4': 277.18,\n    'D4': 293.66,\n    'D#4': 311.13,\n    'E4': 329.63,\n    'F4': 349.23,\n    'F#4': 369.99,\n    'G4': 392.00,\n    'G#4': 415.30,\n    'A4': 440.00,\n    'A#4': 466.16,\n    'B4': 493.88,\n    'C5': 523.25,\n    'C#5': 554.37,\n    'D5': 587.33,\n    'D#5': 622.25,\n    'E5': 659.25,\n    'F5': 698.46,\n    'F#5': 739.99,\n    'G5': 783.99,\n    'G#5': 830.61,\n    'A5': 880.00,\n    'A#5': 932.33,\n    'B5': 987.77,\n    'C6': 1046.50\n};\n\nexport const scale: Array<keyof typeof n> = [\"C6\", \"A#5\", \"G5\", \"F5\", \"D#5\", \"C5\", \"A#4\", \"G4\", \"F4\", \"D#4\", \"C4\"];\n  \nexport default n;\n","import React from 'react';\nimport './Step.css';\n\ninterface Props {\n    value: number;\n    pitch: number;\n    isCurrent: boolean;\n    toggleStep: React. MouseEventHandler;\n    isEditing: boolean;\n    setIsEditing(isEditing: boolean): void;\n    isGhostEditing: boolean;\n    setIsGhostEditing(isEditing: boolean): void;\n    toggleAccent: React.MouseEventHandler;\n    toggleGhost: React.MouseEventHandler;\n\n}\n\nconst Step: React.FC<Props> = (props: Props) => {\n    return (\n        <div\n            className={`Step ${props.isCurrent ? 'Step-current' : ''}`}\n            onMouseDown={(e) => {\n                if (e.button === 0) {\n                    props.toggleStep(e);\n                    props.setIsEditing(true);\n                } else if (e.button === 2) {\n                    props.toggleGhost(e);\n                    props.setIsGhostEditing(true);\n                }\n            }}\n            onContextMenu={(e) => {\n                e.preventDefault();\n            }}\n            onMouseEnter={(e) => {\n                if (props.isEditing) {\n                    props.toggleStep(e);\n                }\n            }}\n            onDoubleClick={(e) => {\n                props.toggleAccent(e);\n            }}\n        >\n            <div className={`Step-content ${props.value > 0 ? 'Step-active' : ''}`} style={{opacity: props.value ? 0.1 + 0.9 * props.value : 1}}></div>\n        </div>\n    );\n}\n\nexport default Step;\n","const ctx = new AudioContext();\n\nexport const master = ctx.createGain();\nexport const filter = ctx.createBiquadFilter();\nexport const reverb = ctx.createConvolver();\nexport const reverbGain = ctx.createGain();\nexport const comp = ctx.createDynamicsCompressor();\n\nfilter.frequency.value = 8000; //Lo pass filter\n\nfilter.connect(reverb);\nreverb.connect(reverbGain);\nreverbGain.connect(comp);\n\nfilter.connect(master);\nmaster.connect(comp);\ncomp.connect(ctx.destination);\n\ncomp.threshold.value = -40; // The comp. here is used to compress the mix between the raw sound of the Osc and the reverb.\ncomp.knee.value = 7;\n\nreverbGain.gain.value = 0.5; // Wet gain\nmaster.gain.value = 0.7; // Dry Gain\n\nexport default ctx;\n\n\nfetch('https://raw.githubusercontent.com/afuh/sequencer/master/assets/Large%20Long%20Echo%20Hall.wav')\n    .then(async res => {\n        ctx.decodeAudioData(await res.arrayBuffer())\n            .then(buffer => {\n                // const source = ctx.createBufferSource();\n                // source.buffer = buffer;\n                reverb.buffer = buffer;\n            })\n        .catch(e =>  \"Error with decoding audio data\" + e)\n    })","import React, { useState, useEffect } from 'react';\nimport './Track.css';\nimport Step from '../Step/Step';\nimport ctx, { filter } from '../../../context';\n\nexport interface Track {\n    pitch: number;\n    steps: number[];\n    name: string;\n}\n\ninterface Props {\n    initialTrack: Track;\n    currentStep: number|null;\n    isGhostEditing: boolean;\n    setIsGhostEditing(isGhostEditing: boolean): void;\n    isEditing: boolean;\n    setIsEditing(isEditing: boolean): void;\n}\n\nconst TrackView: React.FC<Props> = (props: Props) => {\n    const [osc, setOscillator] = useState<OscillatorNode>();\n    const [gainNode, setGainNode] = useState<GainNode>();\n    const [track, setTrack] = useState<Track>(props.initialTrack);\n\n    useEffect(() => {\n        setTrack(props.initialTrack);\n    }, [props.initialTrack]);\n\n    useEffect(() => {\n        if (props.currentStep !== null) {\n            const value = track.steps[props.currentStep];\n            if (value && gainNode) {\n                gainNode.gain.cancelScheduledValues(ctx.currentTime);\n                gainNode.gain.setValueAtTime(gainNode.gain.value ? gainNode.gain.value : 0.000001, ctx.currentTime);\n                gainNode.gain.exponentialRampToValueAtTime(value, ctx.currentTime + 0.1);\n                gainNode.gain.exponentialRampToValueAtTime(0.000001, ctx.currentTime + 0.3);\n            }\n        }\n    }, [props.currentStep, gainNode, track.steps]);\n\n    useEffect(() => {\n        if (osc && gainNode) {\n            osc.frequency.value = track.pitch;\n            osc.connect(gainNode);\n            gainNode.connect(filter);\n            gainNode.gain.value = 0.000001;\n            osc.start();\n        } else {\n            setOscillator(ctx.createOscillator());\n            setGainNode(ctx.createGain());\n        }\n    }, [osc, gainNode, track.pitch]);\n\n    function setStep(index: number, value: number) {\n        track.steps.splice(index, 1, value);\n        setTrack(Object.assign({}, track, {\n            steps: track.steps\n        }));\n    }\n\n    return (\n        <div className=\"TrackView\">\n            <div className=\"TrackTitle\">{track.name}</div>\n            {\n                track.steps.map((value, index) => (\n                    <Step\n                        key={index}\n                        value={value}\n                        pitch={track.pitch}\n                        isCurrent={props.currentStep === index}\n                        toggleStep={() => setStep(index, value ? 0 : .1)}\n                        toggleAccent={() => setStep(index, value === 1 ? 0 : 1)}\n                        toggleGhost={() => setStep(index, value === .01 ? 0 : .01)}\n                        setIsEditing={props.setIsEditing}\n                        isEditing={props.isEditing}\n                        setIsGhostEditing={props.setIsGhostEditing}\n                        isGhostEditing={props.isGhostEditing}\n                    />\n                ))\n            }\n        </div>\n    );\n}\n\nexport default TrackView;\n","import React, { useEffect, useRef } from 'react';\nimport TrackView, { Track } from './Track/Track';\nimport ctx from '../../context';\nimport './Sequencer.css';\n\nexport const totalSteps = 16;\n\ninterface Props {\n    isEditing: boolean;\n    currentStep: number|null;\n    sequence: Track[];\n    setIsEditing(isEditing: boolean): void;\n    setCurrentStep(currentStep: number|null): void;\n    isPlaying: boolean;\n    tempo: number;\n    isGhostEditing: boolean;\n    setIsGhostEditing(isEditing: boolean): void;\n}\n\nconst Sequencer: React.FC<Props> = (props: Props) => {\n    const playIntervalID = useRef<number>();\n\n    let currentStep = useRef<number|null>(props.currentStep);\n\n    const {isPlaying, tempo, setCurrentStep} = props;\n\n    useEffect(() => {\n        window.clearInterval(playIntervalID.current);\n    }, [tempo]);\n\n    useEffect(() => {\n        if (props.currentStep === null) {\n            currentStep.current = null;\n        }\n    }, [props.currentStep]);\n\n    useEffect(() => {\n        if (isPlaying) {\n            ctx.resume();\n            const sixteenthTime = 60000 / tempo / 4;\n            playIntervalID.current = window.setInterval(() => {\n                if (currentStep.current === null) {\n                    currentStep.current = 0;\n                }\n                setCurrentStep(currentStep.current++ % totalSteps);\n            }, sixteenthTime);\n        } else {\n            window.clearInterval(playIntervalID.current);\n        }\n      }, [isPlaying, tempo, setCurrentStep]);\n\n    return (\n        <div className=\"Sequencer\">\n            <div className=\"Sequencer-header\">\n                <div className=\"Sequencer-stepNumbers\">\n                    <div className=\"Sequencer-stepNumber\"></div>\n                    {\n                        (new Array(totalSteps))\n                            .fill(0)\n                            .map((_, i) => <div className=\"Sequencer-stepNumber\" key={i}>{i+1}</div>)\n                    }\n                </div>\n            </div>\n            <div className=\"Sequencer-body\">\n                {\n                    props.sequence.map((track: Track) => (\n                        <TrackView\n                            key={track.pitch}\n                            initialTrack={track}\n                            currentStep={props.currentStep}\n                            isEditing={props.isEditing}\n                            setIsEditing={props.setIsEditing}\n                            isGhostEditing={props.isGhostEditing}\n                            setIsGhostEditing={props.setIsGhostEditing}\n                        />\n                    ))\n                }\n            </div>\n        </div> \n    );\n}\n\nexport default Sequencer;\n","import React, { useState } from 'react';\nimport './App.css';\nimport { Track } from './Sequencer/Track/Track';\nimport notes, {scale} from '../helpers/notes';\nimport Sequencer, { totalSteps } from './Sequencer/Sequencer';\n\nfunction getEmptySequence(): Track[] {\n  return scale.map((note) => ({\n    pitch: notes[note],\n    name: note,\n    steps: new Array(totalSteps).fill(0)\n  }));\n}\n\nfunction getRandomSequence(): Track[] {\n  return scale.map((note) => ({\n    pitch: notes[note],\n    name: note,\n    steps: new Array(totalSteps).fill(0).map(() => Math.random() < 0.125 ? Math.random() : 0)\n  }));\n}\n\nconst App: React.FC = () => {\n  const [sequence, setSequence] = useState(getEmptySequence());\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [tempo, setTempo] = useState(100);\n  const [isEditing, setIsEditing] = useState(false);\n  const [isGhostEditing, setIsGhostEditing] = useState(false);\n  const [currentStep, setCurrentStep] = useState<number|null>(null);\n\n  return (\n    <div\n      className=\"App\"\n      onMouseUp={(e) => {\n        setIsEditing(false);\n        setIsGhostEditing(false);\n      }}\n    >\n      <div className=\"controls\">\n        <button \n          className={`Controls-button ${isPlaying ? 'Pause' : 'Play'}`}\n          title={isPlaying ? 'Pause' : 'Play'}\n          onClick={() => setIsPlaying(!isPlaying)}\n        />\n        <button\n          className=\"Controls-button Stop\"\n          title=\"Stop\"\n          onClick={() => {\n            setCurrentStep(null);\n            setIsPlaying(false);\n          }} />\n        <div>\n          <input type=\"number\" value={tempo} onChange={(e) => setTempo(parseInt(e.target.value))} />\n          bpm\n        </div>\n        <button\n          className=\"Controls-button Clear\"\n          title=\"Clear\"\n          onClick={() => setSequence(getEmptySequence())}/>\n        <button onClick={() => setSequence(getRandomSequence())}>Randomize</button>\n      </div>\n      <Sequencer\n        sequence={sequence}\n        isEditing={isEditing}\n        setIsEditing={setIsEditing}\n        currentStep={currentStep}\n        tempo={tempo}\n        setCurrentStep={setCurrentStep}\n        isPlaying={isPlaying}\n        isGhostEditing={isGhostEditing}\n        setIsGhostEditing={setIsGhostEditing}\n      />\n      <div className=\"help\">\n        Left click: toggle step; <br />\n        Right click: toggle ghost note; <br />\n        Double click: put an accent; <br />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}